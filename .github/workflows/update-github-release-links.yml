name: Update GitHub Release Links in app-config.json

on:
  schedule:
    - cron: '0 3 */3 * *'
  workflow_dispatch:

jobs:
  update-github-release-links:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Сохраняем старые github-release ссылки
        run: |
          extract_links() {
            src="$1"
            out="$2"
            jq -r '
              to_entries[] | 
              .key as $section | 
              .value[] | 
              select(type == "object" and .id and .installationStep and .installationStep.buttons) |
              . as $entry | 
              $entry.installationStep.buttons[] | 
              select(.buttonLink | test("github.com/.+?/releases/download/")) |
              [$section, $entry.id, .buttonLink] | @tsv
            ' "$src" > "$out"
          }

          extract_links sub-page/multiapp/app-config.json multiapp.old_links
          extract_links sub-page/app-config.json app.old_links
          if [ -f sub-page/hwid/app-config.json ]; then
            extract_links sub-page/hwid/app-config.json hwid.old_links
          fi

      - name: Update all versioned GitHub /releases/download/ links to /releases/latest/download/
        run: |
          update_github_links() {
            src="$1"
            tmp="${src}.tmp"

            jq '
              def update_github_versioned:
                if (.buttonLink | test("github.com/.+?/releases/download/(v?[0-9]+(\\.[0-9]+){1,2}(-[a-zA-Z0-9\\._]+)?|[0-9]{4}\\.[0-9]{2}\\.[0-9]{2})/")) then
                  .buttonLink |=
                    (. | capture("github.com/(?<repo>[^/]+/[^/]+)/releases/download/(?<version>[^/]+)/(?<asset>.+)")
                       | "https://github.com/\(.repo)/releases/latest/download/\(.asset)")
                else
                  .
                end;

              walk(
                if type == "object" and has("buttonLink") then
                  update_github_versioned
                else .
                end
              )
            ' "$src" > "$tmp" && mv "$tmp" "$src"
          }

          update_github_links sub-page/multiapp/app-config.json
          update_github_links sub-page/app-config.json
          if [ -f sub-page/hwid/app-config.json ]; then
            update_github_links sub-page/hwid/app-config.json
          fi

      - name: Сохраняем новые github-release ссылки
        run: |
          extract_links() {
            src="$1"
            out="$2"
            jq -r '
              to_entries[] | 
              .key as $section | 
              .value[] | 
              select(type == "object" and .id and .installationStep and .installationStep.buttons) |
              . as $entry | 
              $entry.installationStep.buttons[] | 
              select(.buttonLink | test("github.com/.+?/releases/download/")) |
              [$section, $entry.id, .buttonLink] | @tsv
            ' "$src" > "$out"
          }

          extract_links sub-page/multiapp/app-config.json multiapp.new_links
          extract_links sub-page/app-config.json app.new_links
          if [ -f sub-page/hwid/app-config.json ]; then
            extract_links sub-page/hwid/app-config.json hwid.new_links
          fi

      - name: Логируем изменения ссылок (section, id, from, to, version)
        run: |
          log_diff() {
            old="$1"
            new="$2"
            join -j 2 <(sort "$old") <(sort "$new") | awk -F'\t' '
              function getver(url) {
                match(url, /\/releases\/download\/([^\/]+)\//, arr)
                if (arr[1] == "latest") return "latest"
                return arr[1]
              }
              $3 != $6 {
                vfrom = getver($3)
                vto = getver($6)
                print "Section: " $1 ", id: " $2
                print "  from: " $3
                print "    to: " $6
                print "  version: " vfrom " → " vto
                print ""
              }
            ' | tee -a changed_links.log
          }

          log_diff multiapp.old_links multiapp.new_links
          log_diff app.old_links app.new_links
          if [ -f hwid.old_links ] && [ -f hwid.new_links ]; then
            log_diff hwid.old_links hwid.new_links
          fi

          echo "------ Изменённые ссылки ------"
          cat changed_links.log

      - name: Commit and push changes as legiz-ru
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update GitHub versioned release links to latest (automated)"
          file_pattern: |
            sub-page/multiapp/app-config.json
            sub-page/app-config.json
            sub-page/hwid/app-config.json
          commit_author: "legiz-ru <legiz-ru@users.noreply.github.com>"
